start {

    list [just a plain list] -> A;
    list [Test a [very nested] list] -> L;
    list [[very nested] a list] -> M;
    list [a list [very nested]] -> N;
    list [an very [very [even more nested] nested] nested list] -> Q;

    ;;; will print out above lists    
    pr "A list: ";
    prn A;
    pr "L list: ";
    prn L;
    pr "M list: ";
    prn M;
    pr "N list: ";
    prn N;
    pr "Q list: ";
    prn Q;

    prn "Elements of Q list: ";
    ;;; attempt to print out elements of list using range-based loop
    for i in Q {
        prn i;
    }

    ;;; extract list element
    get_token(2, Q) -> tokenOne;
    pr "Token 2 of Q list: ";
    prn tokenOne;  

    ;;; will print out 'event more nested'
    get_token(1, tokenOne) -> innerToken;
    pr "Token 1 of token 2 of Q list: ";
    prn innerToken;

    ;;; set token in list
    put "some" -> A(1);
    pr "Setting token 1 of A list to some ";
    prn A;

    ;;; add a nested token
    put [nested part] -> A(2);
    pr "Adding a nested part to token 2 of A list: ";
    prn A;

    prn "Done!";
}
