;;; Starting of a chatbot port from POP-11. Just
;;; to see if its possible and how easy it would be.

;;; returns true if the input appears to be a question
fn:bool is_question(input) -> isit {
    list [is how why are may can was were what] -> words;
    get input(0) -> first;

    ;;; Is the first word of the input a member of words?
    member(words, [^first]) -> isit;
}

fn:list inference_engine(input, words) -> response {
    ;;; takes in a list of words and responds by producing a list,
    ;;; assigned to the output variable 'response'

    ;;; make lowercase
    lower input -> input;

    ;;; is the input a question? If so process accordingly.
    call is_question(input) -> answer;
    if (answer = TRUE) {
        list [a question] -> response;
    } elseif (answer = FALSE) {
        ;;; bug in JASL interpretor. Why should this an elseif branch?
        if (input = [i hate ==]) {
            list [perhaps you hate yourself] -> response;
        }
        elseif (input = [what is your ??x]) {
            list [my ^^x is something] -> response;
        }
        elseif (input = [your ??x is ??y]) {
            list [my ^^x is ^^y] -> response;
        }
        elseif (input = [you have ??x]) {
            list [i have ^^y] -> response;
        }
        elseif (input = [you are ??x]) {
            list [i am ^^x] -> response;
        }
        elseif (input = [hello ==]) {
            list [hi] -> response;
        }
        elseif (input = [are you ??x]) {
            list [do i seem ^^x] -> response;
        }
        elseif (input = [i ??x you]) {
            list [perhaps in your fantasy we ^^x each other] -> response;
        }
        elseif (input = [??x is ??y]) {
            list [what if ^^x were not ^^y ? ] -> response;
        }
        elseif (input = [bye]) {
            list [I have enjoyed our meeting] -> response;
        } else {
            ;;; input not recognized -- this is the default response.
            list [please go on] -> response;
        }
    }
}

block interface() {
    ;;; This procedure does not take any input when it starts.
    ;;; it repeatedly reads in something typed by the user,
    ;;; gets a response from inference_engine, then prints out
    ;;; the response.
    ;;; It checks whether the user wants to stop, and if so prints
    ;;; a final message and stops.
    list [] -> words;
    repeat 1000 times {
        readlist "?: " -> sentence;

        ;;; get the reply from the inference engine
        call inference_engine(sentence, words) -> reply;

        ;;; and print it out
        prn reply;

        ;;; we can test whether to stop now
        if (sentence = "bye") { 
            ;;; need to implement break
        }
    }
}

start {
    call interface();
}