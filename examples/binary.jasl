block binary {
    
    // make a string to store the binary string.
    // starts out empty
    string " " -> binaryString;

    while (number > 0 ) {
        integer (number % 2) -> bit;
        integer (number / 2) -> number;
        string_append binaryString, bit;
    }

    // reverse the string now since was constructed 
    // in reverse order
    string_reverse binaryString;

    // now finally display
    echo_nl binaryString;

}

// requires an input program argument. For example run as:
// ./jasl examples/binary.jasl 542354326
start {
    
    // get first program argument which should be a number
    // should probably add some protection
    args 0 -> a;

    // convert a to an integer i
    string_to_integer a -> i;

    // all variables in jasl are global so we can do this!
    integer i -> number;

    // convert the above arbitrary integer to 
    // a binary representation
    echo_nl " ";
    string "Going to convert the number " -> s;
    string_append s, number;
    string_append s, " to binary:";
    echo_nl s;
    echo_nl " ";
    call binary;
    echo_nl " ";
}
