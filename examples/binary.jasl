block binary (number) {
    
    // make a string to store the binary string.
    // starts out empty
    string " " -> binaryString;

    while (number > 0 ) {
        integer (number % 2) -> bit;
        integer (number / 2) -> number;
        append (binaryString, bit) -> binaryString;
    }

    // reverse the string now since was constructed 
    // in reverse order
    string_reverse binaryString;

    // now finally display
    echo_nl binaryString;

}

// requires an input program argument. For example run as:
// ./jasl examples/binary.jasl 542354326
start {
    
    // get first program argument which is a string
    // that will need to be converted to a number
    args 0 -> a;

    // convert a to an integer 
    integer a -> number;

    // convert the above arbitrary integer to 
    // a binary representation
    echo_nl " ";
    string "Going to convert the number " -> s;
    append (s, number) -> s;
    append (s, " to binary:") -> s;
    echo_nl s;
    echo_nl " ";
    call binary(number);
    echo_nl " ";
}
